// <auto-generated />
using System;
using System.Collections.Generic;
using HC.PlatformUsers.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HC.PlatformUsers.Persistence.Context.Migrations
{
    [DbContext(typeof(PlatformUsersContext))]
    partial class PlatformUsersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("platformusers")
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Enterprise.Domain.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccuredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", "platformusers");
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("LinksToSocialMedia")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("PlatformUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubscribersCount")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlatformUserId");

                    b.ToTable("Libraries", "platformusers");
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.PlatformUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserAccountId");

                    b.ToTable("PlatformUsers", "platformusers");
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.PlatformUserToLibrarySubscription", b =>
                {
                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlatformUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("LibraryId", "PlatformUserId");

                    b.HasIndex("PlatformUserId");

                    b.ToTable("PlatformUserToLibrarySubscription", "platformusers");
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.ReadingHistory", b =>
                {
                    b.Property<Guid>("StoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlatformUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastPageRead")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("StoryId", "PlatformUserId");

                    b.HasIndex("PlatformUserId");

                    b.ToTable("ReadingHistories", "platformusers");
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.Review", b =>
                {
                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlatformUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("LibraryId", "PlatformUserId");

                    b.HasIndex("PlatformUserId");

                    b.ToTable("Reviews", "platformusers");
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.StoryBookMark", b =>
                {
                    b.Property<Guid>("StoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlatformUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("StoryId", "PlatformUserId");

                    b.HasIndex("PlatformUserId");

                    b.ToTable("StoryBookMarks", "platformusers");
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.Library", b =>
                {
                    b.HasOne("HC.PlatformUsers.Domain.PlatformUser", "PlatformUser")
                        .WithMany("Libraries")
                        .HasForeignKey("PlatformUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformUser");
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.PlatformUserToLibrarySubscription", b =>
                {
                    b.HasOne("HC.PlatformUsers.Domain.PlatformUser", "PlatformUser")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlatformUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformUser");
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.ReadingHistory", b =>
                {
                    b.HasOne("HC.PlatformUsers.Domain.PlatformUser", null)
                        .WithMany("ReadHistory")
                        .HasForeignKey("PlatformUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.Review", b =>
                {
                    b.HasOne("HC.PlatformUsers.Domain.PlatformUser", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PlatformUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.StoryBookMark", b =>
                {
                    b.HasOne("HC.PlatformUsers.Domain.PlatformUser", null)
                        .WithMany("Bookmarks")
                        .HasForeignKey("PlatformUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HC.PlatformUsers.Domain.PlatformUser", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Libraries");

                    b.Navigation("ReadHistory");

                    b.Navigation("Reviews");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
