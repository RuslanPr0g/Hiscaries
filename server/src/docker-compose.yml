version: '3.9'

services:
  # User Accounts microservice
  useraccounts:
    build:
      context: ./HC.UserAccounts.Api.Rest
      dockerfile: Dockerfile
    expose:
      - "8080"
    depends_on:
      postgresdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ConnectionStrings__Database: "Host=postgresdb;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Username: ${RABBITMQ_USER}
      RabbitMQ__Password: ${RABBITMQ_PASS}
    networks:
      - app-network
    restart: unless-stopped

  # Notifications microservice
  notifications:
    build:
      context: ./HC.Notifications.Api.Rest
      dockerfile: Dockerfile
    expose:
      - "8080"
    depends_on:
      postgresdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ConnectionStrings__Database: "Host=postgresdb;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Username: ${RABBITMQ_USER}
      RabbitMQ__Password: ${RABBITMQ_PASS}
    networks:
      - app-network
    restart: unless-stopped

  # Platform Users microservice
  platformusers:
    build:
      context: ./HC.PlatformUsers.Api.Rest
      dockerfile: Dockerfile
    expose:
      - "8080"
    depends_on:
      postgresdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ConnectionStrings__Database: "Host=postgresdb;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Username: ${RABBITMQ_USER}
      RabbitMQ__Password: ${RABBITMQ_PASS}
    networks:
      - app-network
    restart: unless-stopped

  # Stories microservice
  stories:
    build:
      context: ./HC.Stories.Api.Rest
      dockerfile: Dockerfile
    expose:
      - "8080"
    depends_on:
      postgresdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ConnectionStrings__Database: "Host=postgresdb;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Username: ${RABBITMQ_USER}
      RabbitMQ__Password: ${RABBITMQ_PASS}
    networks:
      - app-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - useraccounts
      - notifications
      - platformusers
      - stories
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL database
  postgresdb:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432" # Exposed for local development; remove in production
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ message broker
  # TODO: Inject config via CI/CD (e.g., secrets management, .env, or Kubernetes secrets)
  rabbitmq:
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672" # Management UI; remove in production
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres-data:
  rabbitmq-data:

networks:
  app-network:
    driver: bridge